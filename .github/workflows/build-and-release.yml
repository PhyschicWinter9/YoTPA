name: Build YoTPA Plugin & Release

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for commit message analysis and tag creation

      - name: Debug Environment
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref type: ${{ github.ref_type }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Commit SHA: ${{ github.sha }}"
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "Commit message: ${{ github.event.head_commit.message }}"
          fi

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Check build.gradle.kts content
        run: cat build.gradle.kts

      - name: Extract version from build.gradle.kts
        id: extract_version
        run: |
          VERSION=$(grep -o 'version = "[^"]*"' build.gradle.kts | cut -d'"' -f2)
          if [ -z "$VERSION" ]; then
            echo "ERROR: Could not extract version from build.gradle.kts"
            echo "Trying alternative pattern..."
            VERSION=$(grep -o "version = '[^']*'" build.gradle.kts | cut -d"'" -f2)
            if [ -z "$VERSION" ]; then
              echo "ERROR: Could not extract version with alternative pattern"
              echo "Trying for any version pattern..."
              VERSION=$(grep -o "version\s*=\s*[\"'][^\"']*[\"']" build.gradle.kts | sed -E "s/version\s*=\s*[\"']([^\"']*)[\"']/\1/")
              if [ -z "$VERSION" ]; then
                echo "ERROR: Could not extract version. Using default version."
                VERSION="0.0.0"
              fi
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: List build output
        run: |
          echo "Contents of build/libs/:"
          ls -la build/libs/

      - name: Check commit message for release trigger
        id: check_release
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
        run: |
          echo "Commit message: ${{ github.event.head_commit.message }}"
          if echo "${{ github.event.head_commit.message }}" | grep -qE '\[release\]|\[version\]'; then
            echo "Release keyword found in commit message. Preparing for release."
            echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
          else
            echo "No release keyword found in commit message."
            echo "SHOULD_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create and push tag
        if: env.SHOULD_RELEASE == 'true'
        run: |
          echo "SHOULD_RELEASE is set to true, proceeding with tag creation"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TAG_NAME="v${{ env.VERSION }}"
          echo "Creating tag $TAG_NAME"
          
          # Check if tag already exists locally
          if git tag | grep -q "^$TAG_NAME$"; then
            echo "Tag $TAG_NAME already exists locally"
          else
            echo "Creating new tag $TAG_NAME"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          fi
          
          # Check if tag exists on remote
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            echo "Tag $TAG_NAME already exists on remote"
          else
            echo "Pushing tag $TAG_NAME to remote"
            git push origin "$TAG_NAME" || { 
              echo "Failed to push tag, error code: $?"
              echo "Trying again with force push..."
              git push --force origin "$TAG_NAME" || echo "Force push also failed with error code: $?"
            }
          fi
          
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Upload JAR artifact to workflow
        uses: actions/upload-artifact@v4
        with:
          name: YoTPA-${{ env.VERSION }}-${{ github.sha }}
          path: |
            build/libs/YoTPA-*.jar
          if-no-files-found: error

      # This is a fallback for when the tag creation fails but we still want to make a release
      - name: Create Release Directly (Fallback)
        if: env.SHOULD_RELEASE == 'true' && !startsWith(github.ref, 'refs/tags/')
        id: create_release_fallback
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/libs/YoTPA-*.jar
          tag: v${{ env.VERSION }}
          file_glob: true
          overwrite: true
          make_latest: true
          release_name: Release v${{ env.VERSION }}
          body: |
            ## YoTPA Plugin Release v${{ env.VERSION }}
            
            Triggered by commit: ${{ github.event.head_commit.message }}
            
            ### What's New
            - Automated release from commit tagged with [release] keyword
            - Version extracted from build.gradle.kts
            
            ### Installation
            Download the JAR file and install it in your plugin directory.

      # This runs when a tag pushed (either manually or by the workflow above)
      - name: Create Release and Upload Assets (For Tags)
        if: startsWith(github.ref, 'refs/tags/')
        id: upload_release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/libs/YoTPA-*.jar
          tag: ${{ github.ref }}
          file_glob: true
          overwrite: true
          make_latest: true
          release_name: Release ${{ github.ref_name }}
          body: |
            ## YoTPA Plugin Release ${{ github.ref_name }}
            
            Version: ${{ env.VERSION }}
            
            ### What's New
            - Automated release from tag ${{ github.ref_name }}
            
            ### Installation
            Download the JAR file and install it in your plugin directory.